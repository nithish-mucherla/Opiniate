{"version":3,"sources":["getWeb3.js","components/opinion/Opinion.js","components/opinionContainer/OpinionContainer.js","components/bottomNav/bottomNav.js","App.js","serviceWorker.js","index.js","loader.gif"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","error","console","log","provider","providers","HttpProvider","Opinion","props","Grid","container","alignItems","justify","id","className","item","sm","xs","src","Identicon","author","toString","alt","opinion","useStyles","makeStyles","root","color","fontFamily","borderBottomColor","OpinionContainer","classes","useState","isDeployedOnNetwork","accounts","opinions","opinionCount","opinionContractInstance","netId","state","setState","loading","setLoading","value","isValid","textField","setTextField","setError","on","accountss","prevState","length","chainId","eth","net","getId","OpinionsContract","networks","loadBlockchainData","useCallback","opinionContract","TruffleContract","setProvider","currentProvider","deployed","i","toNumber","push","useEffect","loadUserAccounts","request","method","message","Opiniate","trim","opiniate","from","tx","Loader","direction","TextField","label","multiline","rows","onChange","e","target","handleChange","helperText","Button","onClick","map","op","Fragment","key","BottomNav","IconButton","href","rel","Instagram","Facebook","LinkedIn","GitHub","Language","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4be15923.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      } else if (window.web3) {\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      } else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Identicon from \"identicon.js\";\r\nimport \"./Opinion.css\";\r\nexport default function Opinion(props) {\r\n  return (\r\n    <Grid\r\n      container\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      id={props.id}\r\n      className=\"opinion\"\r\n    >\r\n      <Grid item sm={3} />\r\n\r\n      <Grid item xs={2} sm={2} className=\"identiconContainer\">\r\n        <img\r\n          src={`data:image/png;base64,${new Identicon(\r\n            props.author,\r\n            30\r\n          ).toString()}`}\r\n          alt={props.author}\r\n          className=\"identicon\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={10} sm={3}>\r\n        <div className=\"author\">{props.author}</div>\r\n      </Grid>\r\n\r\n      <Grid item sm={4} />\r\n\r\n      <Grid item className=\"opinionText\">\r\n        {props.opinion}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Grid, TextField } from \"@material-ui/core\";\r\nimport Loader from \"../../loader.gif\";\r\nimport TruffleContract from \"@truffle/contract\";\r\nimport OpinionsContract from \"../../contracts/Opinions.json\";\r\nimport Opinion from \"../opinion/Opinion.js\";\r\nimport \"./OpinionContainer.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"../../App.css\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    \"& label.Mui-focused\": {\r\n      color: \"#ffffff\",\r\n      fontFamily: \"Lato\",\r\n    },\r\n    \"& .MuiInput-underline:after\": {\r\n      borderBottomColor: \"#ffffff\",\r\n      fontFamily: \"Lato\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction OpinionContainer(props) {\r\n  const classes = useStyles();\r\n  const [state, setState] = useState({\r\n    isDeployedOnNetwork: false,\r\n    accounts: null,\r\n    opinions: null,\r\n    opinionCount: null,\r\n    opinionContractInstance: null,\r\n    netId: null,\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [textField, setTextField] = useState({\r\n    error: \"\",\r\n    value: \"\",\r\n    isValid: true,\r\n  });\r\n  const [error, setError] = useState(\"\");\r\n  window.ethereum.on(\"accountsChanged\", (accountss) => {\r\n    setState((prevState) => {\r\n      return { ...prevState, accounts: accountss.length ? accountss : null };\r\n    });\r\n  });\r\n\r\n  window.ethereum.on(\"chainChanged\", (chainId) => {\r\n    (async () => {\r\n      try {\r\n        const netId = await props.web3.eth.net.getId();\r\n        console.log(\"hi\");\r\n        setLoading(true);\r\n        if (OpinionsContract.networks[netId]) {\r\n          try {\r\n            await loadBlockchainData(netId);\r\n          } catch (err) {\r\n            setError(\"Unable to process the blockchain data, try again later.\");\r\n          }\r\n        } else {\r\n          setState({ ...state, isDeployedOnNetwork: false });\r\n        }\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError(\r\n          \"Unable to connect to the selected network, try switching to other networks.\"\r\n        );\r\n      }\r\n    })();\r\n  });\r\n\r\n  const loadBlockchainData = useCallback(\r\n    async (netId) => {\r\n      const opinionContract = TruffleContract(OpinionsContract);\r\n      opinionContract.setProvider(props.web3.currentProvider);\r\n      const opinionContractInstance = await opinionContract.deployed();\r\n      const opinionCount = await opinionContractInstance.opinionCount();\r\n\r\n      const opinions = [];\r\n      for (let i = opinionCount.toNumber(); i > 0; i--) {\r\n        const opinion = await opinionContractInstance.opinions(i);\r\n        opinions.push({\r\n          id: opinion.id,\r\n          author: opinion.author,\r\n          opinion: opinion.opinion,\r\n        });\r\n      }\r\n      setState((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          netId: netId,\r\n          opinions: opinions,\r\n          opinionCount: opinionCount.toNumber(),\r\n          isDeployedOnNetwork: true,\r\n          opinionContractInstance: opinionContractInstance,\r\n        };\r\n      });\r\n      setLoading(false);\r\n    },\r\n    [props.web3]\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const netId = await props.web3.eth.net.getId();\r\n        if (OpinionsContract.networks[netId]) {\r\n          try {\r\n            await loadBlockchainData(netId);\r\n          } catch (err) {\r\n            setError(\"Unable to process the blockchain data, try again later.\");\r\n          }\r\n        } else {\r\n          setState((prevState) => {\r\n            return { ...prevState, isDeployedOnNetwork: false };\r\n          });\r\n          setLoading(false);\r\n        }\r\n      } catch (err) {\r\n        setError(\r\n          `Unable to detect any default local-networks. Please switch to other network and refresh the page`\r\n        );\r\n        setLoading(false);\r\n      }\r\n    })();\r\n  }, [props.web3, loadBlockchainData]);\r\n\r\n  const loadUserAccounts = async () => {\r\n    try {\r\n      const accounts = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      setState((prevState) => {\r\n        return { ...prevState, accounts: accounts };\r\n      });\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setState((prevState) => {\r\n        return { ...prevState, accounts: null };\r\n      });\r\n    }\r\n  };\r\n\r\n  const Opiniate = async () => {\r\n    if (!textField.value.trim()) {\r\n      setTextField({\r\n        isValid: false,\r\n        value: \"\",\r\n        error: \"Please enter your opinion\",\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      const tx = await state.opinionContractInstance.opiniate(\r\n        textField.value.trim(),\r\n        {\r\n          from: state.accounts[0],\r\n        }\r\n      );\r\n      console.log(tx);\r\n      setState((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          opinionCount: prevState.opinionCount + 1,\r\n          opinions: [\r\n            {\r\n              id: prevState.opinionCount + 1,\r\n              author: state.accounts[0],\r\n              opinion: textField.value.trim(),\r\n            },\r\n            ...prevState.opinions,\r\n          ],\r\n        };\r\n      });\r\n      setTextField({ ...textField, value: \"\" });\r\n    } catch (error) {\r\n      setError(\r\n        `Unable to publish the opinion, try again later. ${error.message}`\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setTextField({ value: e.target.value, error: \"\", isValid: true });\r\n  };\r\n\r\n  if (!loading) {\r\n    if (error) return <div className=\"helperText\">{error}</div>;\r\n    if (state.isDeployedOnNetwork) {\r\n      return (\r\n        <Grid container direction=\"column\">\r\n          <Grid item className=\"userActionDisplay\">\r\n            {state.accounts ? (\r\n              <>\r\n                <TextField\r\n                  label=\"Your Opinion\"\r\n                  multiline\r\n                  rows={4}\r\n                  value={textField.value}\r\n                  onChange={(e) => handleChange(e)}\r\n                  error={!textField.isValid}\r\n                  helperText={textField.error}\r\n                  className={classes.root}\r\n                />\r\n                <br />\r\n                <br />\r\n                <Button className=\"buttonPrimary\" onClick={() => Opiniate()}>\r\n                  publish\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <Button\r\n                className=\"buttonPrimary\"\r\n                onClick={() => loadUserAccounts()}\r\n              >\r\n                Connect to Ethereum\r\n              </Button>\r\n            )}\r\n          </Grid>\r\n          {state.opinions.map((op) => (\r\n            <React.Fragment key={op.id}>\r\n              <Opinion author={op.author} opinion={op.opinion} id={op.id} />\r\n              <hr />\r\n            </React.Fragment>\r\n          ))}\r\n        </Grid>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"helperText\">\r\n        Smart contract not deployed on the current network! Try switching to\r\n        other networks.\r\n      </div>\r\n    );\r\n  }\r\n  return <img src={Loader} alt=\"loader\" className=\"loader\" />;\r\n}\r\n\r\nexport default OpinionContainer;\r\n","import React from \"react\";\r\nimport { Grid, IconButton } from \"@material-ui/core\";\r\nimport {\r\n  Facebook,\r\n  GitHub,\r\n  Instagram,\r\n  Language,\r\n  LinkedIn,\r\n} from \"@material-ui/icons\";\r\nimport \"./bottomNav.css\";\r\n\r\nfunction BottomNav(props) {\r\n  return (\r\n    <>\r\n      <Grid container justify=\"center\" className=\"bottomNav\">\r\n        <Grid item>\r\n          <IconButton>\r\n            <a href=\"https://www.instagram.com/nithish_msn/\" rel=\"noopener\">\r\n              <Instagram color=\"action\" />\r\n            </a>\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton>\r\n            <a href=\"https://www.facebook.com/nithu.mucherla\" rel=\"noopener\">\r\n              <Facebook color=\"action\" />\r\n            </a>\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton>\r\n            <a\r\n              href=\"https://www.linkedin.com/in/sai-nithish-mucherla\"\r\n              rel=\"noopener\"\r\n            >\r\n              <LinkedIn color=\"action\" />\r\n            </a>\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton>\r\n            <a href=\"https://github.com/nithish-mucherla\" rel=\"noopener\">\r\n              <GitHub color=\"action\" />\r\n            </a>\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton>\r\n            <a href=\"https://nithishmucherla.tech\" rel=\"noopener\">\r\n              <Language color=\"action\" />\r\n            </a>\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container justify=\"center\">\r\n        <p className=\"credits\">Made with &#9829; by Nithish Mucherla</p>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BottomNav;\r\n","import React, { useState } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport { Grid } from \"@material-ui/core\";\nimport Loader from \"./loader.gif\";\nimport \"./App.css\";\nimport OpinionContainer from \"./components/opinionContainer/OpinionContainer\";\nimport BottomNav from \"./components/bottomNav/bottomNav.js\";\n\nconst App = (props) => {\n  const [state, setState] = useState({ web3: null });\n  (async () => {\n    const web3 = await getWeb3();\n    setState({ web3: web3 });\n  })();\n\n  const Content = () => {\n    if (window.ethereum) {\n      return state.web3 ? (\n        <OpinionContainer web3={state.web3} />\n      ) : (\n        <img src={Loader} alt=\"loader\" />\n      );\n    }\n    return (\n      <div className=\"helperText\">\n        To continue, you'll have to install Metamask or other dapp browsers.\n      </div>\n    );\n  };\n  return (\n    <Grid container className=\"App\">\n      <Grid item xs={1} />\n      <Grid item container xs={10}>\n        <Grid item className=\"headerContainer\" xs={12}>\n          <h1 className=\"header\">Opiniate</h1>\n          <div className=\"caption\">{`<Stay Anonymous>`}</div>\n        </Grid>\n        <Grid item xs={12}>\n          <Content />\n        </Grid>\n        <BottomNav />\n      </Grid>\n      <Grid item xs={1} />\n    </Grid>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loader.edf18a80.gif\";"],"sourceRoot":""}